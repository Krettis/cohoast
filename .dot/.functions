#!/bin/bash

function parse_yaml {
  local prefix=$2
  local s='[[:space:]]*'
  local w='[a-zA-Z0-9_]*'
  local fs

  fs=$(echo @|tr @ '\034')

   sed -ne "s|^\($s\):|\1|" \
        -e "s|^\($s\)\($w\)$s:$s[\"']\(.*\)[\"']$s\$|\1$fs\2$fs\3|p" \
        -e "s|^\($s\)\($w\)$s:$s\(.*\)$s\$|\1$fs\2$fs\3|p"  $1 |
   awk -F$fs '{
      indent = length($1)/2;
      vname[indent] = $2;
      for (i in vname) {if (i > indent) {delete vname[i]}}
      if (length($3) > 0) {
         vn=""; for (i=0; i<indent; i++) {vn=(vn)(vname[i])("_")}
         printf("%s%s%s=\"%s\"\n", "'$prefix'",vn, $2, $3);
      }
   }'
}

function load_language {
  locale_found=$(locale | grep LANG | cut -d= -f2 | cut -d_ -f1 | cut -d\" -f2)
  if [ $(in_array "${SUPPORTED_LANGUAGES[@]}" $locale_found) == "y" ]; then
    lang=$locale_found 
  else
    lang=$DEFAULT_LANG
  fi
  source $DIR".dot/lang/."$lang
}

function load_user_config {
  eval $(parse_yaml ${DIR}config.yml)
}


function load_file_locations {

	if [ -z "$FILE_LOCATION_HOST" ]; then
	# check which machine using
		return;
	else 
		FILE_HOST="$FILE_LOCATION_HOST"
	fi

}


function backup_host_file {

	local current_date
	local current_time
	local bu_time

	local backup_file
	local backup_file_date
	local annotation_time
	local comment=

  current_date=$(date "+%Y-%m-%d")
  current_time=$(date "+%H:%M:%S")
  bu_time=$(date "+%Y%m%d_%H%M%S")

  backup_file="$1"
  backup_file_date="${BACK_DIR}bu_${bu_time}.bak"
  annotation_time=$(printf "# This is a backup from %s at %s. Only use this when the host file seems to be broken\n" $current_date $current_time)

	if [ ! -z "$2" ]; then
		if [ "$2" == "0" ]; then
			annotation_time=
		else
			comment=$(echo -e "# Remark: "$2)
		fi
	fi

# make a format for the backup to fil in
	echo $annotation_time > $backup_file
	echo $comment >> $backup_file
	cat $FILE_HOST >> $backup_file
	cat $backup_file >> $backup_file_date

}

function show_usage {
	source $DIR".dot/usage.sh"
	fname="usage"
	if [ ! -z $1 ]; then
		fname+="_"$1
	fi

	$fname
}




function giveprompt {

	local givehint=""
	if [[ -n "$2" ]]; then
		givehint="[$2] "
	fi 
	
	local question=$1" $givehint: "
	local default=$2
	read -p "$question" answer
       if [ -z "$answer" ];then
	       answer=$default
       fi	
       echo $answer;
}



function in_array {
    local n=$#
    local value=${!n}
    for ((i=1;i < $#;i++)) {
        if [ "${!i}" == "${value}" ]; then
            echo "y"
            return 0
        fi
    }
    echo "n"
    return 1
}


function chfn_exists 
{
	local result
  result="$(type -t $1)"

	if [ "$result" == 'function' ]; then
		return 0
	else
		return 1
	fi
}


function error_message
{
  if [ -z "$1" ]; then
    return
  fi
  >&2 echo "$1"
}
